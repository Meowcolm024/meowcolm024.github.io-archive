<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Meowcolm024</title>
  
  <subtitle>A personal blog of Meowcolm</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-09T12:53:36.330Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Malcolm Law</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Functional Programming is elegant</title>
    <link href="http://yoursite.com/2019/03/09/Functional-Programming-is-elegant/"/>
    <id>http://yoursite.com/2019/03/09/Functional-Programming-is-elegant/</id>
    <published>2019-03-09T12:17:20.000Z</published>
    <updated>2019-03-09T12:53:36.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="functional-programming-is-elegant"><a class="markdownIt-Anchor" href="#functional-programming-is-elegant"></a> Functional Programming is elegant</h1><h2 id="overview"><a class="markdownIt-Anchor" href="#overview"></a> Overview</h2><p>It is known that Quicksort is an efficient way to sort an array.<br>The alogrithm mainly works like this:</p><ol><li><p>select a pivot point</p></li><li><p>put all elements which are less than the pivot element to the left side of the pivot point, and put those larger than it to the right side</p></li><li><p>use the same method to sort the two subarrays</p></li></ol><p>Or, you can check it out from the book <em>Algorithms</em>, the part of Quicksort is also available online, just check out frome <a href="https://algs4.cs.princeton.edu/23quicksort/" target="_blank" rel="noopener">here</a>.</p><h2 id="approach"><a class="markdownIt-Anchor" href="#approach"></a> Approach</h2><p>Let’s first see the traditional approach in an imperative language (Java):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// quicksort the subarray from a[lo] to a[hi]</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">    sort(a, lo, j-<span class="number">1</span>);</span><br><span class="line">    sort(a, j+<span class="number">1</span>, hi);</span><br><span class="line">    <span class="function"><span class="keyword">assert</span> <span class="title">isSorted</span><span class="params">(a, lo, hi)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// partition the subarray a[lo..hi] so that a[lo..j-1] &lt;= a[j] &lt;= a[j+1..hi]</span></span><br><span class="line"><span class="comment">// and return the index j.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = lo;</span><br><span class="line">    <span class="keyword">int</span> j = hi + <span class="number">1</span>;</span><br><span class="line">    Comparable v = a[lo];</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">// find item on lo to swap</span></span><br><span class="line">        <span class="keyword">while</span> (less(a[++i], v)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == hi) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// find item on hi to swap</span></span><br><span class="line">        <span class="keyword">while</span> (less(v, a[--j])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == lo) <span class="keyword">break</span>;      <span class="comment">// redundant since a[lo] acts as sentinel</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// check if pointers cross</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">        exch(a, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// put partitioning item v at a[j]</span></span><br><span class="line">    exch(a, lo, j);</span><br><span class="line">    <span class="comment">// now, a[lo .. j-1] &lt;= a[j] &lt;= a[j+1 .. hi]</span></span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>However, one thing is that the code is a bit hard to undersatnd, right?</p><p>So, let’s take a look at the functional approach of this algorithm:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">quicksort</span> :: (<span class="type">Ord</span> a) =&gt; [a] -&gt; [a]</span><br><span class="line"><span class="title">quicksort</span> [] = []</span><br><span class="line"><span class="title">quicksort</span> (x:xs) =</span><br><span class="line">    <span class="keyword">let</span> smallerSorted = quicksort (filter (&lt;=x) xs)  </span><br><span class="line">        biggerSorted = quicksort (filter (&gt;x) xs)</span><br><span class="line">    <span class="keyword">in</span>  smallerSorted ++ [x] ++ biggerSorted</span><br></pre></td></tr></table></figure><p>Well, it is much clearer, right? If you cannot understand what this code (in Haskell) means, we could rewrite it in a C-style language (in Swift and Python, since they support higher order function):</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in swift</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">quicksort</span><span class="params">(<span class="number">_</span> arr : [Int])</span></span> -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">    <span class="keyword">if</span> arr.<span class="built_in">count</span> &lt;= <span class="number">1</span> &#123; <span class="keyword">return</span> arr &#125;</span><br><span class="line">    <span class="keyword">let</span> pivot = arr[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> smaller = arr.<span class="built_in">dropFirst</span>().<span class="built_in">filter</span>(&#123;(x : <span class="type">Int</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span> <span class="keyword">return</span> x &lt; pivot&#125;)</span><br><span class="line">    <span class="keyword">let</span> bigger = arr.<span class="built_in">dropFirst</span>().<span class="built_in">filter</span>(&#123;(x : <span class="type">Int</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span> <span class="keyword">return</span> x &gt;= pivot&#125;)</span><br><span class="line">    <span class="keyword">return</span> (quicksort(smaller) + [pivot] + quicksort(bigger))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in python</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quicksort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(arr) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    pivot = arr[<span class="number">0</span>]</span><br><span class="line">    smaller = filter((<span class="keyword">lambda</span> x: x &lt; pivot), arr[<span class="number">1</span>:])</span><br><span class="line">    bigger = filter((<span class="keyword">lambda</span> x: x &gt;= pivot), arr[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">return</span> quicksort(list(smaller)) + [pivot] + quicksort(list(bigger))</span><br></pre></td></tr></table></figure><p>You can see that the code is much shorter and easier to understand. And this method also doesn’t change the original array/list which is more secure. And programming in a functional way does not need to learn a functional programming language like Haskell or Scala. Actually, most modern language supports higher order function making progamming functionally possible (like Python, C#, Swift etc).</p><p>So, functional programming is really elegant right?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;functional-programming-is-elegant&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#functional-programming-is-elegant&quot;&gt;&lt;/a&gt; Functional Programmin
      
    
    </summary>
    
      <category term="Functional Programming" scheme="http://yoursite.com/categories/Functional-Programming/"/>
    
    
      <category term="Haskell" scheme="http://yoursite.com/tags/Haskell/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Euler 26 in Haskell</title>
    <link href="http://yoursite.com/2019/02/11/Euler-26-in-Haskell/"/>
    <id>http://yoursite.com/2019/02/11/Euler-26-in-Haskell/</id>
    <published>2019-02-11T13:28:07.000Z</published>
    <updated>2019-02-11T13:31:59.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="solving-euler-26-using-haskell"><a class="markdownIt-Anchor" href="#solving-euler-26-using-haskell"></a> Solving Euler 26 using Haskell</h1><p>It is really interesting to find ou that the length of the recurring cycle of the reciprocal is only realted to its greatest prime divisor, thus the problem can be transferred to a problem of finding the largest prime number which its reciprocal has the longest recurring cycle under 1,000.</p><p>A question is also asked in <a href="https://stackoverflow.com/questions/54529273/euler-26-in-haskell" target="_blank" rel="noopener">Stack Overflow</a></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Reciprocal cycles</span></span><br><span class="line"></span><br><span class="line"><span class="title">isPrime</span> :: <span class="type">Integer</span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">isPrime</span> k</span><br><span class="line">    | k &lt;= <span class="number">1</span>    = error <span class="string">"Seriously?"</span></span><br><span class="line">    | otherwise = null [ x | x &lt;- [<span class="number">2.</span>.floor(sqrt(fromIntegral k))], k `mod` x == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="title">lp</span> = [x | x &lt;- [<span class="number">7.</span><span class="number">.1000</span>], isPrime x]</span><br><span class="line"></span><br><span class="line"><span class="title">s</span> = map (\n -&gt; head [x | x &lt;- [ceiling(logBase <span class="number">10</span> (fromIntegral n))..], <span class="number">10</span>^x `mod` n == <span class="number">1</span>]) lp</span><br><span class="line"></span><br><span class="line"><span class="title">main</span>::<span class="type">IO</span>()</span><br><span class="line"><span class="title">main</span> = print $ maximum s <span class="comment">-- however it only prints the length, just use `elemIndex` to find the d</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;solving-euler-26-using-haskell&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#solving-euler-26-using-haskell&quot;&gt;&lt;/a&gt; Solving Euler 26 using Hask
      
    
    </summary>
    
    
      <category term="Haskell" scheme="http://yoursite.com/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title>Euler 15 in Haskell</title>
    <link href="http://yoursite.com/2019/02/03/Euler-15-in-Haskell/"/>
    <id>http://yoursite.com/2019/02/03/Euler-15-in-Haskell/</id>
    <published>2019-02-03T03:56:00.000Z</published>
    <updated>2019-02-03T04:00:39.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="solving-euler-15-in-haskell"><a class="markdownIt-Anchor" href="#solving-euler-15-in-haskell"></a> Solving Euler #15 in Haskell</h1><p>This is a efficient way to solve. See <a href="https://projecteuler.net/problem=15" target="_blank" rel="noopener">Problem</a>.</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Lattice paths</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Data.List</span><br><span class="line"><span class="title">findposition</span> number = (\(<span class="type">Just</span> i)-&gt;i) . findIndex (==number)</span><br><span class="line"><span class="title">getposition</span> number  = head . drop number</span><br><span class="line"></span><br><span class="line"><span class="title">count</span> :: [(<span class="type">Int</span>, <span class="type">Int</span>)] -&gt; [<span class="type">Int</span>] -&gt; (<span class="type">Int</span>,<span class="type">Int</span>) -&gt;  <span class="type">Int</span></span><br><span class="line"><span class="title">count</span> ps qs (x,y) </span><br><span class="line">    | x == <span class="number">0</span> || y == <span class="number">0</span>                 = <span class="number">1</span></span><br><span class="line">    | (<span class="number">0</span> &lt; y || <span class="number">0</span> &lt; x) &amp;&amp; c1 &amp;&amp; c2     = getposition (findposition (x,y<span class="number">-1</span>) ps) qs + getposition (findposition (x<span class="number">-1</span>,y) ps) qs</span><br><span class="line">    | (<span class="number">0</span> &lt; y || <span class="number">0</span> &lt; x) &amp;&amp; c1 &amp;&amp; not c2 = getposition (findposition (x,y<span class="number">-1</span>) ps) qs + count ps qs (x<span class="number">-1</span>,y)</span><br><span class="line">    | (<span class="number">0</span> &lt; y || <span class="number">0</span> &lt; x) &amp;&amp; c2 &amp;&amp; not c1 = count ps qs (x,y<span class="number">-1</span>) + getposition (findposition (x<span class="number">-1</span>,y) ps) qs</span><br><span class="line">    | otherwise                        = count ps qs (x<span class="number">-1</span>,y) + count ps qs (x,y<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">where</span> c1 = (x,y<span class="number">-1</span>) `elem` ps</span><br><span class="line">          c2 = (x<span class="number">-1</span>,y) `elem` ps</span><br><span class="line"></span><br><span class="line"><span class="title">latt</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; [<span class="type">Int</span>] -&gt; [<span class="type">Int</span>]</span><br><span class="line"><span class="title">latt</span> m n xs</span><br><span class="line">    | n &lt; m     = latt m (n+<span class="number">1</span>) q</span><br><span class="line">    | otherwise = q</span><br><span class="line">    <span class="keyword">where</span> lp = [(x,y) | x &lt;- [<span class="number">1.</span>.n<span class="number">-1</span>], y &lt;- [<span class="number">1.</span>.n<span class="number">-1</span>]]</span><br><span class="line">          p  = [(x,y) | x &lt;- [<span class="number">1.</span>.n], y &lt;- [<span class="number">1.</span>.n]]</span><br><span class="line">          q  = map (count lp xs) p</span><br><span class="line"></span><br><span class="line"><span class="title">main</span>::<span class="type">IO</span>()</span><br><span class="line"><span class="title">main</span> = print (last (latt <span class="number">20</span> <span class="number">1</span> []))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;solving-euler-15-in-haskell&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#solving-euler-15-in-haskell&quot;&gt;&lt;/a&gt; Solving Euler #15 in Haskell&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="Haskell" scheme="http://yoursite.com/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title>Learning Haskell</title>
    <link href="http://yoursite.com/2019/01/29/Learning-Haskell/"/>
    <id>http://yoursite.com/2019/01/29/Learning-Haskell/</id>
    <published>2019-01-29T11:53:24.000Z</published>
    <updated>2019-01-29T13:36:31.079Z</updated>
    
    <content type="html"><![CDATA[<p>Some simple Haskell functions here 😃</p><p><strong>Quick Sort</strong></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">quicksort</span> :: (<span class="type">Ord</span> a) =&gt; [a] -&gt; [a]</span><br><span class="line"><span class="title">quicksort</span> [] = []</span><br><span class="line"><span class="title">quicksort</span> (x:xs) =</span><br><span class="line">    <span class="keyword">let</span> smallerSorted = quicksort (filter (&lt;=x) xs)  </span><br><span class="line">        biggerSorted = quicksort (filter (&gt;x) xs)</span><br><span class="line">    <span class="keyword">in</span>  smallerSorted ++ [x] ++ biggerSorted</span><br></pre></td></tr></table></figure><p><strong>Fibonacci</strong></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">fbci</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">fbci</span> <span class="number">0</span> = <span class="number">0</span></span><br><span class="line"><span class="title">fbci</span> <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="title">fbci</span> <span class="number">2</span> = <span class="number">1</span></span><br><span class="line"><span class="title">fbci</span> xx = fbci (xx<span class="number">-1</span>) + fbci (xx<span class="number">-2</span>)</span><br></pre></td></tr></table></figure><p><strong>A Traditional way to calculate GCD</strong></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mygcd</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">mygcd</span> x y </span><br><span class="line">    | (p &gt; <span class="number">0</span>) &amp;&amp; (p /= y) = mygcd p y</span><br><span class="line">    | (p &lt; <span class="number">0</span>) &amp;&amp; (p /= x) = mygcd (-p) x</span><br><span class="line">    | otherwise = p</span><br><span class="line">    <span class="keyword">where</span> p = x - y</span><br></pre></td></tr></table></figure><p><strong>A use of pattern matching</strong></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">bmiTell</span> :: (<span class="type">RealFloat</span> a) =&gt; a -&gt; a -&gt; <span class="type">String</span>  </span><br><span class="line"><span class="title">bmiTell</span> weight height  </span><br><span class="line">    | bmi &lt;= skinny = <span class="string">"You're underweight, you emo, you!"</span>  </span><br><span class="line">    | bmi &lt;= normal = <span class="string">"You're supposedly normal. Pffft, I bet you're ugly!"</span>  </span><br><span class="line">    | bmi &lt;= fat    = <span class="string">"You're fat! Lose some weight, fatty!"</span>  </span><br><span class="line">    | otherwise     = <span class="string">"You're a whale, congratulations!"</span>  </span><br><span class="line">    <span class="keyword">where</span> bmi = weight / height ^ <span class="number">2</span>  </span><br><span class="line">          skinny = <span class="number">18.5</span>  </span><br><span class="line">          normal = <span class="number">25.0</span>  </span><br><span class="line">          fat = <span class="number">30.0</span></span><br></pre></td></tr></table></figure><p><strong>A interesting function</strong></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">chain</span> :: (<span class="type">Integral</span> a) =&gt; a -&gt; [a]  </span><br><span class="line"><span class="title">chain</span> <span class="number">1</span> = [<span class="number">1</span>]  </span><br><span class="line"><span class="title">chain</span> n  </span><br><span class="line">    | even n =  n:chain (n `div` <span class="number">2</span>)  </span><br><span class="line">    | odd n  =  n:chain (n*<span class="number">3</span> + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Some simple Haskell functions here 😃&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quick Sort&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
    
      <category term="Haskell" scheme="http://yoursite.com/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title>Pythagorean Triples</title>
    <link href="http://yoursite.com/2018/12/16/Pythagorean-Triples/"/>
    <id>http://yoursite.com/2018/12/16/Pythagorean-Triples/</id>
    <published>2018-12-16T10:34:45.000Z</published>
    <updated>2019-01-29T11:50:52.118Z</updated>
    
    <content type="html"><![CDATA[<p>It is really insteresting that only using one line of <em>Haskell</em> code could create a list of <em>Pythagorean Triples</em>.<br>Copy and paste it to GHCi 😃</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[((p^<span class="number">2</span> - q^<span class="number">2</span>),(<span class="number">2</span>*p*q), sqrt((p^<span class="number">2</span> - q^<span class="number">2</span>)^<span class="number">2</span> + (<span class="number">2</span>*p*q)^<span class="number">2</span>)) | p &lt;- [<span class="number">1.</span><span class="number">.5</span>], q &lt;- [<span class="number">1.</span><span class="number">.5</span>], p &gt; q]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It is really insteresting that only using one line of &lt;em&gt;Haskell&lt;/em&gt; code could create a list of &lt;em&gt;Pythagorean Triples&lt;/em&gt;.&lt;br&gt;
Copy
      
    
    </summary>
    
    
      <category term="Haskell" scheme="http://yoursite.com/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title>FGO Script</title>
    <link href="http://yoursite.com/2018/12/02/FGO-Script/"/>
    <id>http://yoursite.com/2018/12/02/FGO-Script/</id>
    <published>2018-12-02T02:41:52.000Z</published>
    <updated>2018-12-02T03:53:31.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="thinking-in-the-script-of-fatego"><a class="markdownIt-Anchor" href="#thinking-in-the-script-of-fatego"></a> Thinking in the Script of Fate/GO</h1><h2 id="background"><a class="markdownIt-Anchor" href="#background"></a> Background</h2><p>I’m not gonna talk much about the background since everyone who plays this game konws that it’s a really a time-consuming game. What is more, the player need to repetitive actions which are meaningless. Thus, a script is necessary to complete these tasks.</p><h2 id="the-main-thinking"><a class="markdownIt-Anchor" href="#the-main-thinking"></a> The main thinking</h2><p>There are approximately five parts I would like to cover:</p><ol><li>Order Card recognizing</li><li>Servant recognizing</li><li>Attack calculation</li><li>AP recognition &amp; Interface recognition</li><li>Holy Phantasms detection</li></ol><h3 id="order-card-recognizing"><a class="markdownIt-Anchor" href="#order-card-recognizing"></a> Order Card recognizing</h3><p>This is the most basic part of the script(and the <em>Attack calculation</em> part is also essential).</p><p><img src="https://upload-images.jianshu.io/upload_images/13678149-f9b3b76bcd46f603.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Battle Interface"></p><p>The parts circled are the parts we need to detect(obviously).</p><p>So first is the type of the card, which are <em>Quick</em>, <em>Arts</em> and <em>Buster</em> (the <em>Extra Attack</em> is speical so we would cover that later in the <em>Servant recognizing</em> part). To achieve this, we could the <strong>OpenCV</strong> library in Python(Yes, we are going to use <strong>Python</strong> this time 😃) and there is a funtion in the library call <strong>matchTemplate()</strong>, which could match a <em>template</em> with a image and produce a matix showing the how much is template is similar to the image in certain location. Knowing that, we could start working.</p><p>First, we should ervery <em>Order Card</em> as an <strong>Object</strong>, since finally we need to choose 3 of them out of 5(ignoring the Holy Phantasms card). There is a way to match necessary information to the card: We could split the interface into five pieces with each piece contain only <strong>ONE</strong> <em>Order Card</em>. Then we could match the <em>card type</em>,  the <em>card state</em> and the <em>servant</em>(<em>Servant recognition</em> is actually much more complicated) into each card separately. With the <strong>matchTemplate()</strong> function metioned above, we could complete it easily, and taht is the <em>Order Card recognizing</em> part done.</p><h3 id="servant-recognizing"><a class="markdownIt-Anchor" href="#servant-recognizing"></a> Servant recognizing</h3><p>Well this is a really tricky part. Because of the fact that all servants would not appear at the <em>first turn</em> in most cases, and it is impossible to make templates for every servant in the game, we need to find a way to solve that.</p><p>And here is the idea that I came up with: We could create the <em>templates</em> from the screenshot(or the interface) itself. As the location of the portrait of the servant on the card is fixed, and each servant has his/hers/its own portrait, we could just cut the portrait of each servant out and create templates using them. However, we might create repeated templates which need to be deleted. With just a few loops(since we do concern about efficiency) can we achieve our target. Then we just need the match the information into the <em>Order Card</em>. So the <em>Servant recognizing</em> part done.(But realizing it using Python is not as easy as I have written here QAQ)</p><h3 id="attack-calculation"><a class="markdownIt-Anchor" href="#attack-calculation"></a> Attack calculation</h3><p>It is known that if we arrange the same set of cards differently, we would get different attack(I would like to call it <em>Attack Index</em> ==). Although different servents have different <em>Attack Index</em>, we just ignore that in order to make the script simple. So we just need to consider the arrangement of the cards we have. The image is the <em>Rule of the aclculation of Attack Index</em></p><p><img src="https://upload-images.jianshu.io/upload_images/13678149-b63bcf30df4684f2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Rule of calculatiuon"></p><p>Remember that we have already known about the <em>servant</em>, the <em>card type</em>, the <em>card state</em> when we completed the previous steps, we noe can make them into practice. The only thing we need to do is to follow the rule and write an alogrithm based on chart above, just some multiplications right? (so we focusing on whether the script could rather than whether it is effective or not orz)</p><p>Though <em>Holy Phantasms card</em> have not been included yet, we shall talk about taht later. But for the <em>Attack calculation</em> part, it is done.</p><h3 id="ap-recognition-interface-recognition"><a class="markdownIt-Anchor" href="#ap-recognition-interface-recognition"></a> AP recognition &amp; Interface recognition</h3><p>This part is quite important actually. But it is also a easy part due to the fact that we have completed the most difficult parts. Most of this part is just matching templates and getting coordinates. We also need to recover AP when it is insufficient. As for how many <em>Gloden Apples</em> need to be eaten, it depends on the player. It is still a quite an easy part, right?</p><h3 id="holy-phantasms-detection"><a class="markdownIt-Anchor" href="#holy-phantasms-detection"></a> Holy Phantasms detection</h3><p>We know that every servant has a unique <em>Holy Phantasms</em> with its own name. In order to detect that, we need to use the template of the <strong>servant</strong> instead of the template of the <em>order card</em>. But we still need something the facilitate us, since we do not want to release every turn. So we need to mke use of <strong>Tesseract</strong>. This is a OCR library to recognize texts and we will used it to detect <em>turns</em>. Through this, we could release the <em>Holy Phantasms</em> at the certain turn(the <em>FATAL BATTLE</em> for example).</p><h3 id="some-minor-things"><a class="markdownIt-Anchor" href="#some-minor-things"></a> Some minor things</h3><p>If you have read the codes, we may find out that the script also support different “modes”. They are desigened to optimize the performace your <em>party</em>, like <em>Arts Mode</em> etc. Each mode has its own characteristic, for example, in <em>Arts Mode</em>, the script would select 3 <em>Arts cards</em> if possible, instead of choosing the arrangement with highest <em>Attack Index</em>, but in the circumstance that there are less than 3 <em>Arts cards</em> the script would perform like the <em>Default Mode</em> which means that it would chooe the arrangement with highest <em>Attack Index</em>.</p><p>Also the player himself/herself need to make a template for the <em>checkpoint</em> to inform the script of which checkpoint need to be chose. And <em>Support Servants</em> would be chose randomly XD!</p><h2 id="the-end"><a class="markdownIt-Anchor" href="#the-end"></a> The end</h2><p>You can checkout the source code in <a href="https://github.com/Meowcolm024/FGO-One" target="_blank" rel="noopener">GitHub</a> 😃.</p><p>And also two articles written in Chinese: <a href="https://www.jianshu.com/p/55d78d98e168" target="_blank" rel="noopener">1</a>, <a href="https://www.jianshu.com/p/1b2ca5454c73" target="_blank" rel="noopener">2</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;thinking-in-the-script-of-fatego&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#thinking-in-the-script-of-fatego&quot;&gt;&lt;/a&gt; Thinking in the Script 
      
    
    </summary>
    
      <category term="Fate" scheme="http://yoursite.com/categories/Fate/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Calculating Pi</title>
    <link href="http://yoursite.com/2018/12/01/Calculating-Pi/"/>
    <id>http://yoursite.com/2018/12/01/Calculating-Pi/</id>
    <published>2018-12-01T13:12:37.000Z</published>
    <updated>2019-01-29T07:59:31.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="calculating-π"><a class="markdownIt-Anchor" href="#calculating-π"></a> Calculating π</h1><p>Well there is a really easy way to calculate π using C++(or any other programming language actually…)</p><p>And here is a simple program used to calculate π 😃</p><p>The algorithm is actually based on the <em>Leibniz formula for π</em></p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/8283f454140077256b47afadd702fed4b3b56569" alt="Leibniz formula for π"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> pie = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">1000000</span>; i++)</span><br><span class="line">        pie = pie+(<span class="number">-1</span>+<span class="number">2</span>*(i%<span class="number">2</span>))*(<span class="number">1</span>/<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(<span class="number">2</span>*i<span class="number">-1</span>));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"pi: "</span> &lt;&lt; pie * <span class="number">4</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;calculating-π&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#calculating-π&quot;&gt;&lt;/a&gt; Calculating π&lt;/h1&gt;
&lt;p&gt;Well there is a really easy way to calc
      
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Merge Sort</title>
    <link href="http://yoursite.com/2018/12/01/Merge-Sort/"/>
    <id>http://yoursite.com/2018/12/01/Merge-Sort/</id>
    <published>2018-12-01T07:18:18.000Z</published>
    <updated>2018-12-01T07:19:29.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="merge-sort"><a class="markdownIt-Anchor" href="#merge-sort"></a> Merge Sort</h1><blockquote><p>Well, testing pictures XD</p></blockquote><p><img src="https://cppbetterexplained.com/wp-content/uploads/2016/06/merge-sort-algorithm-diagram.png" alt="Merge Sort"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;merge-sort&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#merge-sort&quot;&gt;&lt;/a&gt; Merge Sort&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Well, testing pictures XD&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
      <category term="Alogrithm" scheme="http://yoursite.com/categories/Alogrithm/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Insertion Sort</title>
    <link href="http://yoursite.com/2018/11/29/Insertion-Sort/"/>
    <id>http://yoursite.com/2018/11/29/Insertion-Sort/</id>
    <published>2018-11-29T14:22:39.000Z</published>
    <updated>2018-11-30T14:24:58.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="insertion-sort"><a class="markdownIt-Anchor" href="#insertion-sort"></a> Insertion Sort</h1><blockquote><p>Well this article is for testing codes 😃</p></blockquote><p>Here is the code:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key, j;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        key = arr[i];</span><br><span class="line">        j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((j &gt; <span class="number">-1</span>) &amp;&amp; (arr[j] &gt; key) )</span><br><span class="line">        &#123;</span><br><span class="line">            arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j+<span class="number">1</span>] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;insertion-sort&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#insertion-sort&quot;&gt;&lt;/a&gt; Insertion Sort&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Well this article is fo
      
    
    </summary>
    
      <category term="Alogrithm" scheme="http://yoursite.com/categories/Alogrithm/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/2018/11/25/test/"/>
    <id>http://yoursite.com/2018/11/25/test/</id>
    <published>2018-11-25T10:09:22.000Z</published>
    <updated>2019-01-29T11:50:00.428Z</updated>
    
    <content type="html"><![CDATA[<p>This article is only for testing.</p><p>Testing extension here 😃</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This article is only for testing.&lt;/p&gt;
&lt;p&gt;Testing extension here 😃&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/11/25/hello-world/"/>
    <id>http://yoursite.com/2018/11/25/hello-world/</id>
    <published>2018-11-25T09:07:15.525Z</published>
    <updated>2018-11-25T09:07:15.526Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
